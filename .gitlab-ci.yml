################################################################################
# Gitlab CI samples for Drupal / Php project, code quality and deploy.
#
# Project: https://gitlab.com/mog33/gitlab-ci-drupal
# Documentation: https://gitlab.com/mog33/gitlab-ci-drupal
# Author: Jean Valverde contact@dev-drupal.com
# License: GPL-3
#
# This file is way too huge for a normal CI process, this is just a commented
# example of working jobs for Drupal 8, feel free to cherry pick what you need.
#
# For Gilab CI help on this file see:
#   https://docs.gitlab.com/ee/ci/yaml
#
################################################################################

variables:
  ##############################################################################
  # Common variables for all jobs, edit this part to your needs.
  #
  # Make CI more verbose in case of problem.
  # CI_DEBUG_TRACE: "1"
  #
  # Path is relative to project root, web/ is for Drupal Composer template,
  # change it if you are using docroot/ or any other web root.
  WEB_ROOT: "web"

  # See Phpqa available tools:
  #   https://github.com/EdgedesignCZ/phpqa#available-tools
  # Allow some errors, this will stop the pipeline if a limit is reached.
  TOOLS: "--tools phpcs:0,phpmd,phpcpd,security-checker,parallel-lint"
  # Coding best practices limit, ~20 could be reasonable, to adapt for your project.
  BEST_PRACTICES: "--tools phpcs:0"

  ##############################################################################
  # Drupal custom code / theme / all code. We are checking our code quality,
  # and optionally Drupal core.
  #
  # Test unit folder relative to web root.
  UNIT_TEST_ROOT: "modules/custom"

  # Comma separated for phpqa and phpmetrics.
  PHP_CODE: "${WEB_ROOT}/modules/custom,${WEB_ROOT}/themes/custom"
  # Space separated for eslint and sass lint.
  JS_CODE: "${WEB_ROOT}/modules/custom/**/*.js ${WEB_ROOT}/themes/custom/**/*.js"
  JS_CODE_IGNORE: "**/bootstrap/**/*"
  CSS_FILES: "${WEB_ROOT}/themes/custom/**/css/*.css"
  SASS_CONFIG: "./.sass-lint.yml"
  # Ignore files and dir for all Phpqa tools.
  PHPQA_IGNORE_DIRS: "--ignoredDirs vendor,bootstrap"
  PHPQA_IGNORE_FILES: "--ignoredFiles Readme.md,style.css,print.css"

  ##############################################################################
  # Global settings for all env used for deploy.
  ##############################################################################
  # 
  # USER_NAME: "ubuntu"
  # DRUPAL_FOLDER: "/var/www/htdocs/MY_DRUPAL_ROOT"
  # For Scss support when build in case of a Drupal Bootstrap sub theme.
  # THEME: "MY_THEME_NAME"
  # Deploy environments configuration, add or remove depending deploy jobs.
  # Testing config, set host or ip
  TESTING_HOST: "localhost"
  # Staging config, set host or ip
  STAGING_HOST: "localhost"
  # Production config, set host or ip
  PRODUCTION_HOST: "localhost"

  ##############################################################################
  # Next part do not need to be edited for a first quick run.
  ##############################################################################
  #
  # Phpqa docker image tag and options like code to analyse relative to your 
  # project root.
  #   https://hub.docker.com/r/zdenekdrahos/phpqa/tags/
  PHPQA: "v1.19.0"
  # Phpmetrics use the last phar release.
  #   https://github.com/phpmetrics/PhpMetrics/releases
  PHPMETRICS: "v2.4.1"
  # All reports will be available in artifacts from this folder.
  REPORT_DIR: "reports"
  # Drupal coding standards for Code Sniffer (phpcs) are provided by Coder module.
  #   https://www.drupal.org/project/coder
  DRUPAL_CODER: "2.12"
  # Options for Phpqa to build a report to download, need artifacts set on the
  # job, see '.report' below.
  PHPQA_REPORT: "--report --buildDir ${REPORT_DIR}"
  PHPQA_PHP_CODE: "--analyzedDirs ${PHP_CODE} ${PHPQA_IGNORE_DIRS} ${PHPQA_IGNORE_FILES}"
  PHPQA_ALL_CODE: "--analyzedDirs ${WEB_ROOT} ${PHPQA_IGNORE_DIRS} ${PHPQA_IGNORE_FILES}"

################################################################################
# Define your stages, this will be "pipelines" in gitlab.
#   https://docs.gitlab.com/ee/ci/pipelines.html
################################################################################

stages:
  - build
  # only on branch testing
  - tests
  - code quality
  - code lint
  # Only on tag, when released
  - php code metrics
  # Branch testing or master
  - deploy to testing
  # Manual if branch staging or master
  - deploy to staging
  # Manual if branch production or master
  - deploy to production

################################################################################
# Gitlab ci templates for common jobs to avoid repeat, see
#   https://docs.gitlab.com/ee/ci/yaml/#anchors
################################################################################

# Small repetitive tasks.
.ensure_report:
  - &ensure_report
    mkdir -p ${REPORT_DIR} && chmod -R 777 ${REPORT_DIR}

.default_artifacts: &default_artifacts
  paths:
    - ${REPORT_DIR}/*.html
  # Name will be based on job and branch.
  name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
  # How long do we keep reports files?
  expire_in: 1 day
  # Force artifacts even if the job fail.
  when: always

# Use Phpqa docker image, see https://github.com/EdgedesignCZ/phpqa#docker
# We download the coder project to use the coding standard ruleset for
# Code_Sniffer, composer install is slow.
.phpqa_template: &phpqa_template
  image: zdenekdrahos/phpqa:${PHPQA}
  before_script:
    - if [ ! -d ./coder/coder_sniffer ];
      then
        curl -fsSL https://ftp.drupal.org/files/projects/coder-8.x-${DRUPAL_CODER}.tar.gz -o coder.tar.gz;
        tar xzf coder.tar.gz;
      fi
    - *ensure_report
  artifacts:
    <<: *default_artifacts
  cache:
    key: coder-${DRUPAL_CODER}
    paths:
      - coder

# We use Phpmetrics for metrics report.
# Is included in phpqa but standalone provide the last version with more
# report information.
.phpqmetrics_template: &phpqmetrics_template
  image: composer:latest
  before_script:
    - if [ ! -f ./phpmetrics ];
      then
        curl -fSL https://github.com/phpmetrics/PhpMetrics/releases/download/${PHPMETRICS}/phpmetrics.phar -o phpmetrics;
      fi
    - chmod +x phpmetrics
    - *ensure_report
  artifacts:
    <<: *default_artifacts
    paths:
      - ${REPORT_DIR}/
  cache:
    paths:
    - phpmetrics

# Use Node docker image for Eslint.
.node_template: &node_template
  image: node:8-alpine
  before_script:
    - *ensure_report
  cache:
    paths:
    - node_modules/

# Use Ruby docker image for Markdown lint.
.ruby_template: &ruby_template
  image: ruby:2-alpine
  before_script:
    - *ensure_report

# Basic docker image with ssh to be able to access a remote.
# Each access must add a ssh key, see samples below.
.ssh_agent_template:
  before_script: &ssh_agent_template
    - apk --no-cache add openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Avoid warning on connection.
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

# Testing template for phpunit, this provide Apache / Php.
.test_template: &test_template
  image: juampynr/drupal8ci:latest
  services:
    - mariadb:latest
  before_script:
    - *ensure_report
    - cp .gitlab-ci/phpunit.xml ${WEB_ROOT}/core/
    # Prepare Drupal installation for Tests.
    - mkdir -p ${WEB_ROOT}/sites/default/files
    - cp .gitlab-ci/settings-ci.php ${WEB_ROOT}/sites/default/settings.php
    - mkdir -p /var/www/html
    - ln -s ${CI_PROJECT_DIR}/${WEB_ROOT} /var/www/html/web
    - apache2-foreground&
    # Import dump from cache if available.
    - if [ -f "dump/dump.sql" ];
      then
        mysql -hmariadb -uroot drupal < ${CI_PROJECT_DIR}/dump/dump.sql;
      else
        ${CI_PROJECT_DIR}/vendor/bin/drush --root="/var/www/html/web" si -y minimal;
        mkdir -p ${CI_PROJECT_DIR}/dump;
        ${CI_PROJECT_DIR}/vendor/bin/drush --root="/var/www/html/web" sql-dump --result-file=${CI_PROJECT_DIR}/dump/dump.sql;
      fi
  variables:
    MYSQL_ALLOW_EMPTY_PASSWORD: "1"
    MYSQL_DATABASE: "drupal"
  artifacts:
    <<: *default_artifacts
    paths:
      - ${REPORT_DIR}/*
  cache:
    key: dump-$CI_BUILD_REF_NAME
    paths:
      - dump

################################################################################
# Jobs definition.
#   https://docs.gitlab.com/ee/ci/pipelines.html#jobs
#
# All jobs are set in a stage.
################################################################################

################################################################################
# Build and tests jobs, not for master.
################################################################################

# Sample of a build, considering a Drupal 8 with composer.
# For more samples see
#   https://docs.gitlab.com/ee/ci/examples/deployment/composer-npm-deploy.html
Build:
  stage: build
  image: composer:latest
  script:
    # Download Drupal project, change with composer install if needed.
    - if ! [ -f drupal/web/index.php ]; then
        composer global require hirak/prestissimo --no-progress;
        composer create-project drupal-composer/drupal-project:8.x-dev drupal --stability dev --no-interaction --ignore-platform-reqs;
      fi
    # Because create-project need an empty folder we copy the downloaded drupal.
    - cp -rf drupal/* ${CI_PROJECT_DIR} && cp -f drupal/.e* ${CI_PROJECT_DIR} && cp -f drupal/.g* ${CI_PROJECT_DIR};
  artifacts:
    paths:
      # Build files for deploy.
      - vendor
      - web
      - drush
      - scripts
      - composer.json
      - composer.lock
      - .editorconfig
      - .gitattributes
      - .gitignore
      # Specific to drupal-composer/drupal-project.
      - .env.example
      - load.environment.php
    expire_in: 1 day
  # On build we cache the composer, web and dump folders.
  cache:
    key: drupal-$CI_BUILD_REF_NAME
    paths:
      - drupal

# Job to run Functional tests, require an install.
# WIP https://gitlab.com/MadLittleMods/playing-with-selenium-on-gitlab-ci/blob/master/.gitlab-ci.yml
Functional JS:
  stage: tests
  <<: *test_template
  dependencies:
    - Build
  services:
    - mariadb:latest
    - name: selenium/standalone-chrome-debug:latest
      alias: chromedriver
    - docker:dind
    #- selenium/standalone-firefox:latest
  script:
    - docker ps
    - curl http://chromedriver:4444/wd/hub/status
    - cp .gitlab-ci/.env ${WEB_ROOT}/core/.env || true
    - cd ${WEB_ROOT}/core
    - yarn install
    - yarn test:nightwatch --skiptags core
    #- cp -rf reports/nightwatch ${CI_PROJECT_DIR}/${REPORT_DIR}
  variables:
    MYSQL_ALLOW_EMPTY_PASSWORD: "1"
    MYSQL_DATABASE: "drupal"
    BROWSERTEST_OUTPUT_DIRECTORY: "/var/www/html/web/sites/simpletest"
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    # DRUPAL_TEST_BASE_URL: "http://localhost"
    # DRUPAL_TEST_DB_URL: "mysql://root@mariadb/drupal"
    # DRUPAL_TEST_WEBDRIVER_HOSTNAME: "chromedriver"
    # DRUPAL_TEST_WEBDRIVER_PORT: "9515"
    # DRUPAL_TEST_CHROMEDRIVER_AUTOSTART: "false"
    # DRUPAL_TEST_WEBDRIVER_CHROME_ARGS: "--disable-gpu --headless --no-sandbox"
    # DRUPAL_NIGHTWATCH_OUTPUT: "/var/www/html/${REPORT_DIR}/nightwatch"
    # DRUPAL_NIGHTWATCH_IGNORE_DIRECTORIES: "node_modules,vendor,.*,sites/*/files,sites/*/private,sites/simpletest"
    # DRUPAL_NIGHTWATCH_SEARCH_DIRECTORY: "../modules/custom,../themes/custom"

# Default docker image when not overriden.
image: alpine:latest
